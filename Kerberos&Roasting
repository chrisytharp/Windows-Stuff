Ticket Granting Ticket (TGT)  - an authentication ticket used to request service tickets from the TGS for specific resources from the domain.
Key Distribution Center (KDC) - service for issuing TGTs and service tickets that consist of the Authentication Service and the Ticket Granting Service.
Authentication Service (AS)   - issues TGTs to be used by the TGS in the domain to request access to other machines and service tickets.
Ticket Granting Service (TGS) - takes the TGT and returns a ticket to a machine on the domain.
Service Principal Name (SPN) - an identifier given to a service instance to associate a service instance with a domain service account. Windows requires that
                               services have a domain service account which is why a service needs an SPN set.
KDC Long Term Secret Key (KDC LT Key) - The KDC key is based on the KRBTGT service account. It is used to encrypt the TGT and sign the PAC.
Client Long Term Secret Key (Client LT Key) - based on the computer or service account. It is used to check the encrypted timestamp and encrypt the session key.
Service Long Term Secret Key (Service LT Key) - is based on the service account. It is used to encrypt the service portion of the service ticket and sign the PAC.
Session Key - Issued by the KDC when a TGT is issued. The user will provide the session key to the KDC along with the TGT when requesting a service ticket.
Privilege Attribute Certificate (PAC) - The PAC holds all of the user's relevant information, it is sent along with the TGT to the KDC to be signed by the Target LT Key and
the KDC LT Key in order to validate the user

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HOW KERBEROS WORKS
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Kerberos REAL is a DOMAIN can have multiple domains
Kerberos has three parts: a client, server, and trusted third party (KDC)"AD"
Kerberos builds on "SYMMETRIC-KEY" cryptography and requires a trusted third party, and optionally may use public-key cryptography during certain phases of authentication

1 - CLIENT authen to DC : Authentication request is encrypted w/ user key(passwd) - req has some clear txt to help DC identify User(timestamps are in req)
2 - DC gets req & see's if it has the CLIENTS key in DB. if DC can decrypt the req (w/ it's copy of the clients key) DC knows the CLIENT is legitimate
3 - DC grants CLIENT w/ TGT (ticket granting ticket), DC encrypts the TGT w/ it's Key & sends it to the CLIENT
4 - CLIENT stores TGT in Memory called "KERB TRAY" (in Volatile Mem so if can be erased after reboor/ computer crashes)
5 - CLIENT wants access to FILE server, CLIENT looks to see if it has a TGS (tickt granting servcies) in kerb tray, IF NOT, the CLIENT sends a COPY of TGT w/ reqs to access 
          FILE server to DC
6 - DC uses Key to decrypt TGT, if legit, DC creates a TGS w\ all CLIENTS permisions for the FILE server. THEN encrypts TGS w/ FILE servers key & sends to CLIENT
7 - CLIENT stores TGS in kerb tray
8 - IF CLIENT wants access to FILE server, it sends a COPY of the TGS to FILE server
9 - FILE server Decrypts TGS w/ it's Key, if successfull GRANTS ACCESS to CLIENT, & FILE server opens up TGS to limit CLIENT on what access it has

NOTE: - EVERY TIME CLIENT wants access to FILE servers, it has to send a COPT of TGS EVERYTIME due to FILE server memory constraints
      - ALL TGT's by default last 8 Hrs
      
TOOL "KerbTray" will show all tickets on your computers RAM

ANOTHER EXPLANAITION
AS-REQ - 1.) The client requests an Authentication Ticket or Ticket Granting Ticket (TGT).

AS-REP - 2.) The Key Distribution Center verifies the client and sends back an encrypted TGT.

TGS-REQ - 3.) The client sends the encrypted TGT to the Ticket Granting Server (TGS) with the Service Principal Name (SPN) of the service the client wants to access.

TGS-REP - 4.) The Key Distribution Center (KDC) verifies the TGT of the user and that the user has access to the service, then sends a valid session key for the service
              to the client.

AP-REQ - 5.) The client requests the service and sends the valid session key to prove the user has access.

AP-REP - 6.) The service grants access
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HOW KERBEROASTING WORKS  GREAT WAY To Escalate Priveleges
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Kerberoasting: 
                    Attacks SERVICE accounts
                    You can identify SERVICE accounts w/ out priveleges 
                    All SERVICE accounts have SPN (Service Principal Name) attribute that connects to a service in AD 
 
1 - Query s DC to get all SERVICE acocunts (like file servers) in AD that have SPN registered
          .\GetUserSPN.ps1
                    ----> ServicePrincipalName: MSSQLSvc/ a-sql02.ur.domain.net:1433
                          Name:.....
                          SAM Account:...
                          
2a - Use PS to Reqs. a SERVICE ticket from AD
          .\.ps1 
                    ---> SPN: MSSQL/ .................:1443
                         SecurityKey: System.Identity.Model.Tokens.InMemorySymmetricSecurityKey    <---- "InMemory"
                         
2b - Now SERVICE Ticket is in Memory in Kerbtray" - It's encrypted w\ SQL Servers NTLM Hash (aka passwd aka key) 
3 - use Mimikat to dump ticket to disk, take compute offline and crack ticket (or can paas the hash)

**This works because DC by default uses weak cipher RC4 encryption- this can be cracked***

RC4 is a stream cipher Dev 1987 (Ron's Code)
                    
LOOKUP - Computer accounts end in $ and are more secure and rotate frequently                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
